/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type RequestLineStruct = {
  protocol: string;
  path: string;
  method: BigNumberish;
};

export type RequestLineStructOutput = [
  protocol: string,
  path: string,
  method: bigint
] & { protocol: string; path: string; method: bigint };

export type HEADRequestStruct = {
  requestLine: RequestLineStruct;
  ifModifiedSince: BigNumberish;
  ifNoneMatch: BytesLike;
};

export type HEADRequestStructOutput = [
  requestLine: RequestLineStructOutput,
  ifModifiedSince: bigint,
  ifNoneMatch: string
] & {
  requestLine: RequestLineStructOutput;
  ifModifiedSince: bigint;
  ifNoneMatch: string;
};

export type RangeStruct = { start: BigNumberish; end: BigNumberish };

export type RangeStructOutput = [start: bigint, end: bigint] & {
  start: bigint;
  end: bigint;
};

export type GETRequestStruct = {
  head: HEADRequestStruct;
  rangeBytes: RangeStruct;
};

export type GETRequestStructOutput = [
  head: HEADRequestStructOutput,
  rangeBytes: RangeStructOutput
] & { head: HEADRequestStructOutput; rangeBytes: RangeStructOutput };

export type ResponseLineStruct = {
  protocol: string;
  code: BigNumberish;
  method: BigNumberish;
};

export type ResponseLineStructOutput = [
  protocol: string,
  code: bigint,
  method: bigint
] & { protocol: string; code: bigint; method: bigint };

export type CacheControlStruct = {
  maxAge: BigNumberish;
  sMaxage: BigNumberish;
  noStore: boolean;
  noCache: boolean;
  immutableFlag: boolean;
  publicFlag: boolean;
  mustRevalidate: boolean;
  proxyRevalidate: boolean;
  mustUnderstand: boolean;
  staleWhileRevalidate: BigNumberish;
  staleIfError: BigNumberish;
};

export type CacheControlStructOutput = [
  maxAge: bigint,
  sMaxage: bigint,
  noStore: boolean,
  noCache: boolean,
  immutableFlag: boolean,
  publicFlag: boolean,
  mustRevalidate: boolean,
  proxyRevalidate: boolean,
  mustUnderstand: boolean,
  staleWhileRevalidate: bigint,
  staleIfError: bigint
] & {
  maxAge: bigint;
  sMaxage: bigint;
  noStore: boolean;
  noCache: boolean;
  immutableFlag: boolean;
  publicFlag: boolean;
  mustRevalidate: boolean;
  proxyRevalidate: boolean;
  mustUnderstand: boolean;
  staleWhileRevalidate: bigint;
  staleIfError: bigint;
};

export type RedirectStruct = { code: BigNumberish; location: string };

export type RedirectStructOutput = [code: bigint, location: string] & {
  code: bigint;
  location: string;
};

export type HeaderInfoStruct = {
  methods: BigNumberish;
  cache: CacheControlStruct;
  redirect: RedirectStruct;
  resourceAdmin: BytesLike;
};

export type HeaderInfoStructOutput = [
  methods: bigint,
  cache: CacheControlStructOutput,
  redirect: RedirectStructOutput,
  resourceAdmin: string
] & {
  methods: bigint;
  cache: CacheControlStructOutput;
  redirect: RedirectStructOutput;
  resourceAdmin: string;
};

export type ResourceMetadataStruct = {
  mimeType: BytesLike;
  charset: BytesLike;
  encoding: BytesLike;
  language: BytesLike;
  location: BytesLike;
  size: BigNumberish;
  version: BigNumberish;
  lastModified: BigNumberish;
  header: BytesLike;
};

export type ResourceMetadataStructOutput = [
  mimeType: string,
  charset: string,
  encoding: string,
  language: string,
  location: string,
  size: bigint,
  version: bigint,
  lastModified: bigint,
  header: string
] & {
  mimeType: string;
  charset: string;
  encoding: string;
  language: string;
  location: string;
  size: bigint;
  version: bigint;
  lastModified: bigint;
  header: string;
};

export type HEADResponseStruct = {
  responseLine: ResponseLineStruct;
  headerInfo: HeaderInfoStruct;
  metadata: ResourceMetadataStruct;
  etag: BytesLike;
};

export type HEADResponseStructOutput = [
  responseLine: ResponseLineStructOutput,
  headerInfo: HeaderInfoStructOutput,
  metadata: ResourceMetadataStructOutput,
  etag: string
] & {
  responseLine: ResponseLineStructOutput;
  headerInfo: HeaderInfoStructOutput;
  metadata: ResourceMetadataStructOutput;
  etag: string;
};

export type GETResponseStruct = {
  head: HEADResponseStruct;
  bytesRange: RangeStruct;
  data: BytesLike;
};

export type GETResponseStructOutput = [
  head: HEADResponseStructOutput,
  bytesRange: RangeStructOutput,
  data: string
] & {
  head: HEADResponseStructOutput;
  bytesRange: RangeStructOutput;
  data: string;
};

export type LOCATERequestStruct = {
  head: HEADRequestStruct;
  rangeChunks: RangeStruct;
};

export type LOCATERequestStructOutput = [
  head: HEADRequestStructOutput,
  rangeChunks: RangeStructOutput
] & { head: HEADRequestStructOutput; rangeChunks: RangeStructOutput };

export type LOCATEResponseStruct = {
  head: HEADResponseStruct;
  dataPoints: BytesLike[];
};

export type LOCATEResponseStructOutput = [
  head: HEADResponseStructOutput,
  dataPoints: string[]
] & { head: HEADResponseStructOutput; dataPoints: string[] };

export type OPTIONSResponseStruct = {
  responseLine: ResponseLineStruct;
  allow: BigNumberish;
};

export type OPTIONSResponseStructOutput = [
  responseLine: ResponseLineStructOutput,
  allow: bigint
] & { responseLine: ResponseLineStructOutput; allow: bigint };

export interface WTTPGatewayInterface extends Interface {
  getFunction(
    nameOrSignature: "GET" | "HEAD" | "LOCATE" | "OPTIONS"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GET",
    values: [AddressLike, GETRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "HEAD",
    values: [AddressLike, HEADRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "LOCATE",
    values: [AddressLike, LOCATERequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIONS",
    values: [AddressLike, RequestLineStruct]
  ): string;

  decodeFunctionResult(functionFragment: "GET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "HEAD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOCATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OPTIONS", data: BytesLike): Result;
}

export interface WTTPGateway extends BaseContract {
  connect(runner?: ContractRunner | null): WTTPGateway;
  waitForDeployment(): Promise<this>;

  interface: WTTPGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GET: TypedContractMethod<
    [_site: AddressLike, _getRequest: GETRequestStruct],
    [GETResponseStructOutput],
    "view"
  >;

  HEAD: TypedContractMethod<
    [_site: AddressLike, _headRequest: HEADRequestStruct],
    [HEADResponseStructOutput],
    "view"
  >;

  LOCATE: TypedContractMethod<
    [_site: AddressLike, _locateRequest: LOCATERequestStruct],
    [LOCATEResponseStructOutput],
    "view"
  >;

  OPTIONS: TypedContractMethod<
    [_site: AddressLike, _optionsRequest: RequestLineStruct],
    [OPTIONSResponseStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GET"
  ): TypedContractMethod<
    [_site: AddressLike, _getRequest: GETRequestStruct],
    [GETResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "HEAD"
  ): TypedContractMethod<
    [_site: AddressLike, _headRequest: HEADRequestStruct],
    [HEADResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "LOCATE"
  ): TypedContractMethod<
    [_site: AddressLike, _locateRequest: LOCATERequestStruct],
    [LOCATEResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "OPTIONS"
  ): TypedContractMethod<
    [_site: AddressLike, _optionsRequest: RequestLineStruct],
    [OPTIONSResponseStructOutput],
    "view"
  >;

  filters: {};
}
